
jsPsych.plugins["draw-armed-bandit"] = (function() {

  var plugin = {};

  jsPsych.pluginAPI.registerPreload('image-keyboard-response', 'stimulus', 'image');

  plugin.info = {
    name: 'draw-armed-bandit',
    description: '',
    parameters: {
      choices: {
        type: jsPsych.plugins.parameterType.KEYCODE,
        array: true,
        pretty_name: 'Choices',
        default: jsPsych.ALL_KEYS,
        description: 'The keys the subject is allowed to press to respond to the stimulus.'
      },
      prompt: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: 'Prompt',
        default: null,
        description: 'Any content here will be displayed below the stimulus.'
      },
      stimulus_duration: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'Stimulus duration',
        default: null,
        description: 'How long to hide the stimulus.'
      },
      trial_duration: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'Trial duration',
        default: null,
        description: 'How long to show trial before it ends.'
      },
      response_ends_trial: {
        type: jsPsych.plugins.parameterType.BOOL,
        pretty_name: 'Response ends trial',
        default: true,
        description: 'If true, trial will end when subject makes a response.'
      },
      // Special parameters:
      display_type: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: 'Display',
        default: null,
        description: 'Type of four-armed bandit display'
      },
      stimulus_selection: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'StimulusChoice',
        default: null,
        description: 'Which stimulus to hightlight'
      },
      stimulus_text: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: 'StimulusText',
        default: null,
        descript: 'Text to display in selected square'
      },
      reward1: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'Reward1',
        default: null,
        descript: 'Reward for option 1'
      },
      reward2: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'Reward2',
        default: null,
        descript: 'Reward for option 2'
      },
      reward3: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'Reward3',
        default: null,
        descript: 'Reward for option 3'
      },
      reward4: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'Reward4',
        default: null,
        descript: 'Reward for option 4'
      },
      display_width: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'DisplayWidth',
        default: 300,
        descript: 'Width of the display canvas'
      },
      display_height: {
        type: jsPsych.plugins.parameterType.INT,
        pretty_name: 'DisplayHeight',
        default: 300,
        descript: 'Width of the display canvas'
      },
    }
  }

  plugin.trial = function(display_element, trial) {

    display_element.innerHTML = '<canvas id="canvas" width="' + trial.display_width + '" height="' + trial.display_height + '"></canvas>'

    var canvas = document.getElementById('canvas'),
    context = canvas.getContext('2d');
    canvas.setAttribute('style', "position: absolute;  left: 50%;margin-left:-400px; top: 50%;margin-top:-300px");
    draw(trial.display_width/2, trial.display_height/2, trial.stimulus_selection, trial.display_type, trial.stimulus_text);

    function draw(width, height, selection, action, text) {
      var canvas = document.getElementById('canvas');
      if (canvas.getContext) {
        var ctx = canvas.getContext('2d');

        // style definition
        ctx.lineWidth = 5;
        ctx.font = 0.2*height + 'px serif';
        var colors = ['#33a02c', '#b2df8a', '#a6cee3', '#1f78b4']
        var square_size = 0.8*width
        var offset = 0.1*width

        // drawing the squares
        var counter = 0;
        for (var i = 0; i < 2; i++){
          for (var j = 0; j < 2; j++){
            if (counter === selection){
              if (action === 'filled'){
                // Add the filled square
                ctx.fillStyle = colors[counter];
                ctx.fillRect(offset + i*width, offset + j*height, square_size, square_size);

              } else if (action === 'gradient_up'){
                // Create a gradient
                var grd=ctx.createLinearGradient(offset + i*width, offset + j*height, offset + i*width + square_size, offset + j*height + square_size);
                grd.addColorStop(0,colors[counter]);
                grd.addColorStop(1,"white");

                // Add the square
                ctx.fillStyle = grd;
                ctx.fillRect(offset + i*width, offset + j*height, square_size, square_size);
              } else if (action == 'gradient_down'){
                // Create a gradient
                var grd=ctx.createLinearGradient(offset + i*width, offset + j*height, offset + i*width + square_size, offset + j*height + square_size);
                grd.addColorStop(0,"white");
                grd.addColorStop(1,colors[counter]);

                // Add the square
                ctx.fillStyle = grd;
                ctx.fillRect(offset + i*width, offset + j*height, square_size, square_size);
              } else if (action === 'text'){
                // Add text
                ctx.fillStyle = 'black'
                ctx.fillText('+' + text, offset + i*width+ square_size/2 - ctx.measureText('+' + text).width/2, offset + j*height + square_size/2 + 0.5*(0.2*height)/2);

              }
              ctx.strokeStyle = colors[counter];
              ctx.strokeRect(offset + i*width, offset + j*height, square_size, square_size);

            } else {
              ctx.strokeStyle = colors[counter];
              ctx.strokeRect(offset + i*width, offset + j*height, square_size, square_size);
              ctx.fillStyle = 'black'
              switch (counter){
                case 0:
                  var label_text = 'f'
                  break
                case 1:
                  var label_text = 'g'
                  break
                case 2:
                  var label_text = 'h'
                  break
                case 3:
                  var label_text = 'j'
                  break
              }
              ctx.fillText(label_text, offset + i*width+ square_size/2 - ctx.measureText(counter + 1).width/2, offset + j*height + square_size/2 + 0.5*(0.2*height)/2);
            }
            counter += 1
          }
        }
      }
    }

    // store response
    var response = {
      rt: null,
      key: null
    };

    // function to end trial when it is time
    var end_trial = function() {

      // kill any remaining setTimeout handlers
      jsPsych.pluginAPI.clearAllTimeouts();

      // kill keyboard listeners
      if (typeof keyboardListener !== 'undefined') {
        jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);
      }

      // gather the data to store for the trial
      if (trial.stimulus_text){
        var trial_data = {
          "selected_stimulus": trial.stimulus_selection,
          "win": trial.stimulus_text,
          "reward1": trial.reward1,
          "reward2": trial.reward2,
          "reward3": trial.reward3,
          "reward4": trial.reward4
        }
      } else if (response.rt) {
        var trial_data = {
          "rt": response.rt,
          "selected_stimulus": trial.stimulus_selection,
          "key_press": response.key
        }
      };

      // clear the display
      display_element.innerHTML = '';

      // move on to the next trial
      jsPsych.finishTrial(trial_data);
    };

    // function to handle responses by the subject
    var after_response = function(info) {

      // only record the first response
      if (response.key == null) {
        response = info;
      }

      if (trial.response_ends_trial) {
        end_trial();
      }
    };

    // start the response listener
    if (trial.choices != jsPsych.NO_KEYS) {
      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({
        callback_function: after_response,
        valid_responses: trial.choices,
        rt_method: 'date',
        persist: false,
        allow_held_key: false
      });
    }

    // hide stimulus if stimulus_duration is set
    if (trial.stimulus_duration !== null) {
      jsPsych.pluginAPI.setTimeout(function() {
        display_element.querySelector('#jspsych-image-keyboard-response-stimulus').style.visibility = 'hidden';
      }, trial.stimulus_duration);
    }

    // end trial if trial_duration is set
    if (trial.trial_duration !== null) {
      jsPsych.pluginAPI.setTimeout(function() {
        end_trial();
      }, trial.trial_duration);
    }

  };

  return plugin;
})();
